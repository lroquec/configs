---
- hosts: all
  vars:
    gnomedesktop: true
    nvidia_exists: false
  tasks:
    - name: check packages
      package_facts:
        manager: auto

    - name: "Add vivaldi apt key"
      ansible.builtin.get_url:
        url: https://repo.vivaldi.com/archive/linux_signing_key.pub
        dest: /etc/apt/keyrings/vivaldi.asc
      become: true

    - name: "Add vivaldi repo"
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/vivaldi.asc] https://repo.vivaldi.com/archive/deb/ stable main"
        state: present
      become: true

    - name: "Add appimage repo"
      ansible.builtin.apt_repository:
        repo: "ppa:appimagelauncher-team/stable"
        state: present
      become: true

    - name: "Update repos first"
      ansible.builtin.apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
      become: true

    - name: "Update system"
      ansible.builtin.apt: upgrade=dist force_apt_get=yes
      become: true

    - name: "Check if reboot is needed"
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no
      become: true

    - name: "Reboot system"
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible due to kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists
      become: true

    - name: "Remove default packages that I do not like"
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
        state: absent
      become: true
      loop:
        - firefox
        - libreoffice-impress
        - libreoffice-calc
        - libreoffice-writer
      ignore_errors: true

    - name: "Now install my default packages"
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      become: true
      loop:
        - vim
        - curl
        - unzip
        - wget
        - git
        - tldr
        - procps
        - file
        - build-essential
        - software-properties-common
        - apt-transport-https
        - net-tools
        - tcpdump
        - zsh
        - fonts-powerline
        - copyq
        - gnupg2
        - vivaldi-stable
        - ubuntu-restricted-extras
        - vlc
        - python3-pip
        - libavcodec-extra
        - bash-completion
        - gimp
        - virtualbox
        - vagrant
        - jq
        - flatpak
        - htop
        - preload
        - tlp
        - tlp-rdw
        - bleachbit
        - locate
        - tmux
        - ranger
        - neofetch
        - ncdu
        - trash-cli
        - cmatrix
        - peek
        - autojump
        - bat
        - openvpn
        - network-manager-openvpn
        - x11-xserver-utils
        - remmina
        - p7zip-full
        - unrar
        - libreoffice-draw
        - containerd
        - appimagelauncher
        - ghostscript
        - imagemagick

    - name: Remove docker from system packages
      ansible.builtin.apt:
        state: absent
        name: docker*
      become: true
      when: "'docker' in ansible_facts.packages"

      # will install the latest version of docker
    - name: Install Docker
      become: true
      shell: |
        curl https://get.docker.com/ | sh
        systemctl enable docker
        systemctl start docker
      when: "'docker-ce' not in ansible_facts.packages"
      ignore_errors: true

    - name: Ensure group "docker" exists
      ansible.builtin.group:
        name: docker
        state: present
      become: true

    - name: Setup Docker
      become: true
      shell: usermod -aG docker "{{ ansible_user_id }}"
      when: "'docker-ce' not in ansible_facts.packages"

    - name: Install docker compose
      pip:
        name: docker-compose
        state: present
        executable: pip3

    - name: Check if .zshrc exists
      stat:
        path: ~/.zshrc
      register: stat_rc_result

    - name: Check if .oh-my-zsh exists
      stat:
        path: ~/.oh-my-zsh
      register: stat_oh_my_zsh_result

    - name: Cloning  oh-my-zsh
      git:
        repo=https://github.com/robbyrussell/oh-my-zsh
        dest=~/.oh-my-zsh
      when: not stat_oh_my_zsh_result.stat.exists

    - name: Clone dotfiles
      git:
        repo: https://github.com/lroquec/configs.git
        dest: "{{ ansible_env.HOME }}/configs"
        version: main
        force: true

    - name: Creating a symlink for vim
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/configs/vimrc'
        dest: '{{ ansible_env.HOME }}/.vimrc'
        state: link

    - name: Delete previous vim folder
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.vim'
        state: absent

    - name: Creating a symlink for vim
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/configs/vim'
        dest: '{{ ansible_env.HOME }}/.vim'
        state: link

    - name: Install vimplug for vim plugins
      shell: curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      ignore_errors: yes

    - name: Install vim plugins
      shell: vim -E -s -u "{{ ansible_env.HOME }}/.vimrc" +PlugInstall +qall
      ignore_errors: yes

    - name: Delete previous ohmyzsh folder
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.oh-my-zsh'
        state: absent

    - name: Creating a symlink for ohmyzsh
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/configs/oh-my-zsh'
        dest: '{{ ansible_env.HOME }}/.oh-my-zsh'
        state: link

    - name: Creating a symlink for zprofile
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/configs/.zprofile'
        dest: '{{ ansible_env.HOME }}/.zprofile'
        state: link

    - name: Delete previous zshrc
      ansible.builtin.file:
        path: '{{ ansible_env.HOME }}/.zshrc'
        state: absent

    - name: Creating a symlink for zshrc
      ansible.builtin.file:
        src: '{{ ansible_env.HOME }}/configs/.zshrc'
        dest: '{{ ansible_env.HOME }}/.zshrc'
        state: link

    - name: Clone zsh plugin autosuggestions
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        version: main
        force: true

    - name: Clone zsh plugin syntax highlighting
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlightings"
        version: main
        force: true

    - name: Clone zsh theme
      git:
        repo: https://github.com/bhilburn/powerlevel9k.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/powerlevel9k"
        version: main
        force: true

    - name: set default shell for users
      become: yes
      user:
        name: '{{ ansible_user_id }}'
        shell: /bin/zsh

    - name: Create fonts directory if it does not exist
      ansible.builtin.file:
        path: /usr/local/share/fonts
        state: directory
        mode: '0666'
      become: true

    - name: Install nerd font hack
      ansible.builtin.unarchive:
        src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/Hack.zip
        dest: /usr/local/share/fonts/
        remote_src: true
      become: true

    - name: Refresh fonts
      shell: fc-cache -fv
      ignore_errors: true
      become: true

    - name: Enable flatpak
      ansible.builtin.command: 'flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
      become: true

    - name: install packages flatpak
      community.general.flatpak:
        name: "{{ item }}"
        state: present
        method: system
      loop:
        - org.telegram.desktop
        - com.github.eneshecan.WhatsAppForLinux
        - com.usebottles.bottles
        - com.bitwarden.desktop
        - com.microsoft.Teams
        - org.onlyoffice.desktopeditors
        - org.mozilla.firefox
        - com.google.Chrome
        - org.mozilla.Thunderbird
        - com.visualstudio.code
      become: true
      ignore_errors: true

    - name: install gnome packages via flatpak
      community.general.flatpak:
        name: "{{ item }}"
        state: present
        method: system
      loop:
        - com.mattjakeman.ExtensionManager
        - org.gnome.Extensions
      become: true
      ignore_errors: true
      when: gnomedesktop

    - name: "Install my default GNOME packages"
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      become: true
      loop:
        - dconf-editor
        - gnome-tweaks
        - network-manager-openconnect
        - network-manager-openconnect-gnome
        - gnome-software-plugin-flatpak
        - chrome-gnome-shell
        - gnome-screenshot
        - drawing
        - gnome-weather
        - gscan2pdf
        - blanket
      when: gnomedesktop

    - name: Another gnome config
      become: true
      shell: apt install -y --install-suggests gnome-software
      ignore_errors: yes
      when: gnomedesktop

    - name: Last gnome config
      become: true
      shell: gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
      ignore_errors: yes
      when: gnomedesktop

    - name: Install openconnect for kde
      become: true
      shell: snap install openconnect-vpn --edge
      ignore_errors: yes
      when: not gnomedesktop

    - name: Install winbox
      become: true
      shell: snap install winbox
      ignore_errors: yes

    - name: Clean apt cache
      ansible.builtin.apt:
        autoclean: yes
      become: true

    - name: Auto remove unused packages
      ansible.builtin.apt:
        autoremove: yes
        purge: yes
      become: true
